version: "3.7"

services:

  zookeeper:
    image: zookeeper:${ZOOKEEPER_VERSION}
    container_name: zookeeper-container
    hostname: zookeeper
    networks:
      - zookeeper-network

  kafkabroker:
    image: confluentinc/cp-kafka:${CONFLUENTINC_KAFKA_VERSION}
    container_name: kafkabroker-container
    depends_on:
      - zookeeper
    expose:
      - "19092"
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafkabroker:19092,PLAINTEXT_INTERNAL://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - zookeeper-network
    volumes:
      - kafkabroker-data:/var/lib/kafka/data

  schemaregistry:
    image: confluentinc/cp-schema-registry:${CONFLUENTINC_KAFKA_VERSION}
    container_name: schemaregistry-container
    restart: unless-stopped
    depends_on:
      - kafkabroker
    ports:
      - "8085:8085"
    networks:
      - zookeeper-network
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafkabroker:19092,PLAINTEXT_INTERNAL://localhost:9092
      SCHEMA_REGISTRY_LISTENERS: http://schemaregistry:8085
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_DEBUG: "true"

  kafkaconnect:
    image: confluentinc/cp-kafka-connect:${CONFLUENTINC_KAFKA_VERSION}
    container_name: kafkaconnect-container
    depends_on:
      - kafkabroker
      - schemaregistry
    ports:
      - "8083:8083"
    networks:
      - zookeeper-network
    volumes:
      - ./connectors:/usr/share/java/connectors
    environment:
      CONNECT_REST_PORT: 8083
      CONNECT_BOOTSTRAP_SERVERS: kafkabroker:19092
      CONNECT_GROUP_ID: kafkaconnect_group
      CONNECT_CONFIG_STORAGE_TOPIC: kafkaconnect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_TOPIC: kafkaconnect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_TOPIC: kafkaconnect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: kafkaconnect

  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:${CONFLUENTINC_KAFKA_VERSION}
    container_name: kafka-rest-proxy-container
    ports:
      - "8082:8082"
    depends_on:
      - kafkabroker
    networks:
      - zookeeper-network
    environment:
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: kafkabroker:19092


  kafka-ui:
    image: provectuslabs/kafka-ui:${KAFKA_UI_VERSION}
    container_name: kafka-ui-container
    ports:
      - "8800:8080"
    networks:
      - zookeeper-network
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafkabroker:19092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - KAFKA_CLUSTERS_0_OFFSETSTORAGE=kafka

  kafkacat:
    image: confluentinc/cp-kafkacat:${CONFLUENTINC_KAFKACAT_VERSION}
    container_name: kafkacat-container
#    restart: unless-stopped
    depends_on:
      - kafkabroker
    networks:
      - zookeeper-network
    command:
      - bash
      - -c
      - |
        kafkacat -P -b kafkabroker:19092 -t ${CONFLUENTINC_KAFKACAT_TOPIC} << EOF
        mensje1
        mensje2
        mensje3
        EOF


networks:
  zookeeper-network:

volumes:
  kafkabroker-data:
